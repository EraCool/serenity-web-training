serenity.test.root = webtests

environment = run_with_chrome
//environment = run_on_browserstack
//environment = run_on_saucelabs
//environment = run_on_local_hub

environments {
  run_on_saucelabs {
    tags = "remote-enabled"
    webdriver {
      #
      # Driver must be remote for Saucelabs
      #
      driver = remote
      remote.url = "https://#{saucelabs.username}:#{saucelabs.accessKey}@#{saucelabs.datacenter}.saucelabs.com:443/wd/hub"
      #
      # W3C Capabilities
      #
      screenResolution = "1280x1024"
      strictFileInteractability = true
      unhandledPromptBehavior = "ignore"
      timeouts {
        script = 20000
        pageLoad = 400000,
        implicit = 1000
      }
    }

    #
    # Saucelabs-specific capabilities
    #
    saucelabs {
      #
      # Mandatory fields
      #
      platformName = "Windows 10"
      browserName = "Chrome"
      browserVersion = "latest"
      #
      # The saucelabs.url property tells Serenity to use Saucelabs for these tests
      #
      # url = "https://#{saucelabs.username}:#{saucelabs.accessKey}@#{saucelabs.datacenter}:443/wd/hub"

      #
      # Optional saucelabs-specific fields
      #
      tags = ["end-to-end"]
      //      recordScreenshots = false
      maxDuration = 900
      extendedDebugging = true
      capturePerformance = true
    }
    headless.mode = false
  }

  #
  # Specify browserstack.user and browserstack.key on the command line, e.g.
  #  mvn verify -Denvironment=run_with_browserstack -Dbrowserstack.user=<MY_BROWSERSTACK_USER> -Dbrowserstack.key=<MY_API_KEY>
  #
  run_on_browserstack {
    tags = "remote-enabled"
    webdriver.driver = remote
    webdriver.remote.url = "https://#{browserstack.user}:#{browserstack.key}@hub-cloud.browserstack.com/wd/hub"
    headless.mode = false
    browserstack {
      os = "Windows"
      os_version = "10"
      browser = "Edge"
      browser_version = "latest"
      resolution = "1280x800"
    }
  }

  #
  # You will need to install and run a Selenoid server locally - see https://aerokube.com/selenoid/latest/
  #
  run_on_local_hub {
    tags = "remote-enabled"
    webdriver.driver = remote
    webdriver.remote.url = "http://127.0.0.1:4444/wd/hub"
    webdriver {
      browserName = "chrome"
      screenResolution = "1280x1024"
      unhandledPromptBehavior = "ignore"
    }
  }

  run_with_chrome {
    webdriver.driver = chrome

    chrome {
      # driver = $HOME/some/other/path/to/chrome/binary

      switches = [
        "--start-maximized",
        "--accept-insecure-certs",
        # Commented lined like this are ignored
//        "window-size=800,600",
        "--disable-popup-blocking",
        "--ignore-certificate-errors",
        "--disable-infobars"
        "--disable-gpu"
      ]

      # See all the preference options here: https://chromedriver.chromium.org/capabilities
      preferences {
        download {
          prompt_for_download: false
          default_directory: "$TEMPDIR"
        }
      }
    }
  }

  run_with_firefox {
    webdriver.driver = firefox
    firefox {
      preferences {
        general {
          warnOnAboutConfig = false
        }
        browser {
          download {
            # TIP: Don't use a subdirectory as Firefox expects the download folder to exist
            dir = "$TEMPDIR"
            folderList = 2
            manager.showWhenStarting = false
          }
          helperApps {
            neverAsk.saveToDisk = "application/octet-stream"
          }
        }

      }
    }
  }

  run_with_edge {
    webdriver.driver = edge

    edge {
      args = [
        "accept-insecure-certs",
        # Ignore this line
        "window-size=800,600",
        "ignore-certificate-errors",
        "disable-gpu"
      ]
      preferences {
        download {
          default_directory = "$TEMPDIR",
          directory_upgrade = true,
          prompt_for_download = false,
        }
        plugins.always_open_pdf_externally = true,
        profile.default_content_settings.popups = "0"
      }

    }
  }
}
